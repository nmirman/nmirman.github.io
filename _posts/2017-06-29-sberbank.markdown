---
layout: post
title:  "Russian Housing Market"
date:   2017-06-29 15:27:48 -0500
categories: projects
---

{% include image.html url="/assets/P9110095_2.jpg" description="<em>Viktor Pivovarov, 1994</em>" %}{:width="350px" %}

&nbsp;

In September of 2015 I attended the [Large Hadron Collider Physics Conference](http://lhcp2015.com) in St. Petersburg, Russia, where I presented [progress](https://arxiv.org/abs/1512.02244) on top quark measurements at CERN.  Some very exciting developments, but I'll leave that for another post!

Afterwards, I visited some family in Moscow and stayed in their classic 1960s apartment building, known as a ["khrushchyovka"](https://en.wikipedia.org/wiki/Khrushchyovka).  These Soviet-construction apartment buildings are now slowly being phased out, and my hosts told me about their experiences looking for new housing during a period of economic uncertainty in Russia.

This year, when I learned that Sberbank was hosting a [Russian Housing Market Competition on Kaggle](https://www.kaggle.com/c/sberbank-russian-housing-market), I couldn't *not* join.  Sberbank provided a dataset of real estate sales from August 2011 to June 2015, and challenged participants to develop a price prediction algorithm based on a number of real estate, geographic, and macro-economic features.  To see how I approached this problem, read below!  Or check out this [jupyter notebook](https://github.com/nmirman/sberbank/blob/master/analysis/Sberbank.ipynb) for more details.


## Dataset features

The dataset provided by Sberbank includes real estate sales in Moscow during the period from August 2011 to June 2015.  Information is provided on the real estate property, the "raion" (district) where it is located, and the state of the Russian economy.  Here is a summary (in total there are several hundred features):


#### Real estate
  * Area of property, living area, kitchen area
  * Number of rooms
  * Floor of property, and maximum floor of apartment building
  * Wall material
  * Build year
  * Condition of property
  * Sale type: for investment, or owner-occupier
  * Price of sale

#### Location and district
  * District name
  * Population of district by age, gender, and employment
  * Number of buildings by build year
  * Number and distance to closest cafe, shopping mall, transportation hub, green zone, power plant
  * Distance to major roads and city center
  * Distance to education centers
  * Number of major cultural centers and tourist attractions in district

#### Economy
  * GDP stats
  * Foreign exchange rates
  * Brent crude oil
  * Mortgage rates
  * Size of labor force and unemployment rate
  * Rent prices by apartment size

In my analysis, I used the 300 available real estate and location features, but left out macro-economic information.  With about 30,000 entries in the dataset, there probably isn't enough data to utilize the macro-economic features without overfitting.

A quick look at the dataset reveals a number of entries with missing features, typos, or nonsensical values that are just meant to be placeholders.  I made sure to do some rudimentary cleaning before moving forward with the analysis.
  

## First look

We begin by looking at how the *price* of a property depends on its *location*.

![png](/assets/Sberbank_files/Sberbank_6_0.png)

There is a significant variation in the median price by location, as we can see by the nine quantiles color-coded in the map above.  The most expensive properties are located near the city center and to its West, with a median price around nine million rubles.  The median price generally decreases as we move away from the center, where it falls below five million rubles.

Distributions of the *price* and *floor area* of the properties are shown below.  The *floor area* is one of the most predictive features in the dataset, and we take advantage of that when developing our model below.

![png](/assets/Sberbank_files/Sberbank_8_0.png)


## Anomalous values

Some entries in this dataset have unrealistic or missing values.  Examples include properties with a floor area less than 10 $$ m^2 $$, or apartments on a floor above the building's maximum floor.  Some values are set to 1 or 0 as placeholders for NaN.  These values were addressed by either filling in missing values using a linear interpolation, or leaving them as NaN.  The XGBoost model employed below has automatic handling of NaN values.

A particularly interesting example of anomalous values occurs in investment property sales -- keep reading for further details!

### Example: investment sale prices
An interesting artifact shows up if we look at the low end of the price spectrum for sales marked as "Investment" rather than "Owner-Occupier".  There seems to be an excess of sales with prices of exactly 1, 2, or 3 million rubles.

![png](/assets/Sberbank_files/Sberbank_10_0.png)

It turns out that prices are sometimes artificially reduced in investment purchases for tax purposes.  That means that the "true" price of these properties may be significantly higher.

This effect is likely to have some effect on our modeling of sale prices.  To address it, we keep these sales in the dataset for now, but provide some distinction between investment and owner-occupier properties when training our model.


## Geographic pricing interpolation

A very important effect to capture in our model is the dependence of *price* on the *location* of each property.  Actually what we care about is *price/floor area*, since that value will be much more constant between individual properties.  We expect certain areas of the city to be more expensive *per* $$ m^2 $$ than others, and to model this effect we interpolate the *price/floor area* to get an average value in the vicinity of each property.

The interpolation scheme is based on an exponential function that decreases with distance.  The value of the exponential becomes a weight, which enters into a weighted average of *price/floor area*.

### Interpolation results

We conduct the interpolation for investment and owner-occupier properties separately -- that way, the anomalous investment prices don't affect the owner-occupier price interpolation.  Calculating the interpolated *price/floor area* for each property gives us the map below:

![png](/assets/Sberbank_files/Sberbank_25_0.png)


We can see a general trend of decreasing *price/floor area* as we move away from the city center.  (At the very center, we seem to have some very inexpensive apartments.  This is just another anomaly in the data, caused by properties that are erroneously located at the Kremlin!)


## Modeling with XGBoost

To conduct price prediction, we employ the [XGBoost](http://xgboost.readthedocs.io/en/latest/) supervised learning algorithm.  Why XGBoost?  It provides the benefits of *gradient tree boosting*, performs well on sparse data, includes tools for cross validation, and conveniently runs with parallelization on my local machine!

We determine the optimal *hyperparameter* values using a 10-fold cross validation scheme.  The optimal algorithm uses 582 boost rounds, and achieves a cross-validation root mean square error of about 2.6 million rubles.

To see which features are the most predictive, we can look at their F-scores:

![png](/assets/Sberbank_files/Sberbank_32_1.png)

Here are the scores for the top twenty features:

                        Feature         Importance
                  -----------------------------------
                        full_sq         967
                   price_interp         847
                     psq_interp         535
                       kitch_sq         485
                        life_sq         459
                          floor         429
                      max_floor         315
                     build_year         313
                 month_year_cnt         220
                  week_year_cnt         189
                   rel_kitch_sq         188
                kindergarten_km         171
                      room_size         167
                          month         130
                      rel_floor         126
                  green_zone_km         122
                 metro_min_avto         121
    public_transport_station_km         119
                   big_road2_km         118
                          state         117


As expected, the interpolated price (*price_interp*) and interpolated price per floor area (*psq_interp*) are at the top of the list, as well as *full_sq* (the floor area), *life_sq* (the living area), and *kitch_sq* (the kitchen area).  The month of purchase is also pretty important, as are the proximity to education and transportation, and features of the apartment building.

### Results

The XGBoost model above was trained on data from August 2011 to June 2014.  The last year of data (July 2014 to June 2015) was used as an independent test set to evaluate our price prediction algorithm.

We begin by looking at the *residuals*, defined by:

$$ r = \frac{y_{pred} - y_{true}}{y_{true}} $$,

where $$r$$ is the residual, $$ y_{pred} $$ is the predicted price, and $$ y_{true} $$ is the true price.

![png](/assets/Sberbank_files/Sberbank_39_1.png)

Most of the residuals are between -1 and 1, as expected.  However, there is a large tail going into values up to 15.  This is to be investigated further -- it probably has to do with the anomalous investment sale prices.

In the independent test set, our *root mean square error* is about 2.7 million rubles, where the mean true sale price is 7.8 million rubles.  That indicates that our prediction algorithm is accurate to about 35% on average.  This number may be improved by targeting the tail of the residual spectrum above.

Let's look at the dependence of the residuals on some of the main features of our model.

![png](/assets/Sberbank_files/Sberbank_41_0.png)

These plots show no major correlations, which indicates that the XGBoost model is reasonably unbiased as a function of these variables, and captures most of the available statistical information.  The plot of *residuals* versus *interpolated price* (lower right) may have some subtle structure -- perhaps something to be investigated further.

The largest residuals are found at low *true price*, which may point to anomalous investment prices as the culprit.  To improve our model, it may be worth while to think some more about these anomalous prices and how to deal with them.

In conclusion, our model is able to predict real estate sale prices in Moscow to within about 35% on average.  Reducing the prediction error will require a more in-depth analysis of various anomalies in the dataset, which can be addressed with improved cleaning and/or more sophisticated modeling.  The price has a high dependence on features like *floor area* and *location*, and we were able to take advantage of this in the interpolation and XGBoost part of our model.  Overall, it was interesting to think about the Russian housing market, and it will be interesting to see how the market evolves in the coming decade! 
